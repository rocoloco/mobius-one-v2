// Replace the existing completion state rendering in collections.tsx
// (around line 400-500 where isComplete is checked)

if (!currentInvoice || state.ui.isQueueComplete) {
  if (isComplete) {
    // Calculate real business impact
    const totalApprovedValue = [...state.processed, ...state.approvedForBatch].reduce((sum, inv) => sum + inv.amount, 0);
    const workingCapitalFreed = Math.round(totalApprovedValue * 0.4); // ~40% becomes working capital
    const daysAccelerated = 15; // Average DSO reduction
    
    // Calculate session duration
    const sessionStart = getSessionStartTime();
    const sessionDuration = Math.round((Date.now() - sessionStart.getTime()) / (1000 * 60)); // minutes
    
    return (
      <CompletionExperience
        totalProcessed={state.processed.length + state.approvedForBatch.length}
        totalValue={totalApprovedValue}
        workingCapitalFreed={workingCapitalFreed}
        daysAccelerated={daysAccelerated}
        sessionDuration={sessionDuration}
        onComplete={() => {
          // Clear session data
          localStorage.removeItem('collectionsProgress');
          localStorage.removeItem('sessionStartTime');
          // Navigate to dashboard
          navigate('/dashboard');
        }}
      />
    );
  }
  
  // ... rest of partial completion logic
}

// Add this component above or in a separate file
const CompletionExperience: React.FC<{
  totalProcessed: number;
  totalValue: number;
  workingCapitalFreed: number;
  daysAccelerated: number;
  sessionDuration: number;
  onComplete: () => void;
}> = ({ totalProcessed, totalValue, workingCapitalFreed, daysAccelerated, sessionDuration, onComplete }) => {
  const [stage, setStage] = useState<'celebration' | 'impact' | 'next'>('celebration');
  const [confettiPieces, setConfettiPieces] = useState<JSX.Element[]>([]);

  useEffect(() => {
    // Generate confetti
    const colors = ['#10B981', '#3B82F6', '#8B5CF6', '#F59E0B', '#EF4444'];
    const pieces = Array.from({ length: 50 }, (_, i) => (
      <div
        key={i}
        className="absolute w-3 h-3 rounded-sm animate-fall"
        style={{
          left: `${Math.random() * 100}%`,
          top: '-20px',
          backgroundColor: colors[Math.floor(Math.random() * colors.length)],
          transform: `rotate(${Math.random() * 360}deg)`,
          animationDelay: `${Math.random() * 3}s`,
          animationDuration: `${3 + Math.random() * 2}s`
        }}
      />
    ));
    setConfettiPieces(pieces);

    // Progress through stages
    const timer1 = setTimeout(() => setStage('impact'), 3000);
    const timer2 = setTimeout(() => setStage('next'), 6000);

    return () => {
      clearTimeout(timer1);
      clearTimeout(timer2);
    };
  }, []);

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(amount);
  };

  return (
    <div className="fixed inset-0 z-50 bg-gradient-to-br from-green-50 via-emerald-50 to-blue-50 flex items-center justify-center p-4">
      {/* Confetti Container */}
      {stage === 'celebration' && (
        <div className="fixed inset-0 pointer-events-none overflow-hidden">
          {confettiPieces}
        </div>
      )}

      <div className="max-w-2xl w-full">
        {/* Stage 1: Celebration */}
        {stage === 'celebration' && (
          <div className="text-center animate-fade-in">
            <div className="relative mb-8 inline-block">
              <div className="absolute inset-0 bg-green-400 rounded-full blur-3xl opacity-30 animate-pulse" />
              <div className="relative bg-white rounded-full p-8 shadow-2xl animate-bounce">
                <CheckCircle className="w-24 h-24 text-green-500" strokeWidth={2} />
              </div>
            </div>
            
            <h1 className="text-6xl font-bold mb-4 animate-scale-up">
              <span className="bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent">
                {formatCurrency(workingCapitalFreed)}
              </span>
            </h1>
            <p className="text-2xl text-gray-700 animate-slide-up">
              freed up for your business
            </p>
          </div>
        )}

        {/* Stage 2: Business Impact */}
        {stage === 'impact' && (
          <div className="animate-fade-in">
            <h2 className="text-3xl font-bold text-center mb-12 text-gray-900">
              You just gave your business superpowers
            </h2>
            
            <div className="grid grid-cols-3 gap-6 mb-12">
              <div className="text-center bg-white rounded-2xl p-6 shadow-lg animate-slide-up delay-100">
                <Zap className="w-12 h-12 text-green-600 mx-auto mb-4" />
                <div className="text-4xl font-bold text-green-600 mb-2">{daysAccelerated}</div>
                <div className="text-sm text-gray-600">Days faster cash</div>
              </div>
              
              <div className="text-center bg-white rounded-2xl p-6 shadow-lg animate-slide-up delay-200">
                <TrendingUp className="w-12 h-12 text-blue-600 mx-auto mb-4" />
                <div className="text-4xl font-bold text-blue-600 mb-2">
                  {formatCurrency(workingCapitalFreed)}
                </div>
                <div className="text-sm text-gray-600">Working capital</div>
              </div>
              
              <div className="text-center bg-white rounded-2xl p-6 shadow-lg animate-slide-up delay-300">
                <Shield className="w-12 h-12 text-purple-600 mx-auto mb-4" />
                <div className="text-4xl font-bold text-purple-600 mb-2">100%</div>
                <div className="text-sm text-gray-600">Relationships safe</div>
              </div>
            </div>

            <div className="bg-white/50 backdrop-blur rounded-xl p-4 text-center animate-fade-in">
              <p className="text-gray-600">
                {totalProcessed} invoices • {sessionDuration} minutes • 
                <span className="font-semibold"> Zero stress</span>
              </p>
            </div>
          </div>
        )}

        {/* Stage 3: Next Actions */}
        {stage === 'next' && (
          <div className="text-center animate-fade-in">
            <div className="bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-2xl p-6 mb-8 shadow-xl animate-slide-up">
              <div className="flex items-center justify-center gap-3 mb-2">
                <Clock className="w-5 h-5" />
                <span className="text-lg font-semibold">Batch Run Tonight</span>
              </div>
              <p className="text-blue-100">
                Your approved messages will be sent at 6:00 PM PST
              </p>
            </div>

            <button
              onClick={onComplete}
              className="group bg-gradient-to-r from-gray-900 to-gray-800 text-white text-xl font-semibold px-12 py-6 rounded-xl shadow-2xl hover:shadow-3xl transform hover:-translate-y-1 transition-all duration-200 mb-6"
            >
              Back to work
              <ArrowRight className="inline-block ml-3 w-6 h-6 group-hover:translate-x-1 transition-transform" />
            </button>

            <p className="text-gray-600 animate-fade-in delay-300">
              <span className="font-semibold text-gray-900">8 new invoices</span> waiting for tomorrow
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

// Add these styles to your global CSS or Tailwind config
const completionStyles = `
  @keyframes fall {
    to {
      transform: translateY(100vh) rotate(720deg);
    }
  }
  
  @keyframes scale-up {
    from {
      transform: scale(0);
      opacity: 0;
    }
    to {
      transform: scale(1);
      opacity: 1;
    }
  }
  
  @keyframes slide-up {
    from {
      transform: translateY(20px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }
  
  @keyframes fade-in {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
  
  .animate-fall {
    animation: fall linear infinite;
  }
  
  .animate-scale-up {
    animation: scale-up 0.6s ease-out;
  }
  
  .animate-slide-up {
    animation: slide-up 0.6s ease-out;
  }
  
  .animate-fade-in {
    animation: fade-in 0.6s ease-out;
  }
  
  .delay-100 {
    animation-delay: 0.1s;
  }
  
  .delay-200 {
    animation-delay: 0.2s;
  }
  
  .delay-300 {
    animation-delay: 0.3s;
  }
`;
Powerful, large model for complex challenges Learn more

Artifacts

Collections Completion Experience
Click to open component • 1 version

